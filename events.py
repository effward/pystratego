#SECURITY NOTE: anything in here can be created simply by sending the 
# class name over the network.  This is a potential vulnerability
# I wouldn't suggest letting any of these classes DO anything, especially
# things like file system access, or allocating huge amounts of memory

class Event:
	"""this is a superclass for any events that might be generated by an
	object and sent to the EventManager"""
	def __init__(self):
		self.name = "Generic Event"

class TickEvent(Event):
	def __init__(self):
		self.name = "CPU Tick Event"

class SecondEvent(Event):
	def __init__(self):
		self.name = "Clock One Second Event"

class QuitEvent(Event):
	def __init__(self):
		self.name = "Program Quit Event"

class MapBuiltEvent(Event):
	def __init__(self, map):
		self.name = "Map Finished Building Event"
		self.map = map

class GameStartRequest(Event):
	def __init__(self):
		self.name = "Game Start Request"

class GameStartedEvent(Event):
	def __init__(self, game):
		self.name = "Game Started Event"
		self.game = game

class CharactorMoveRequest(Event):
	def __init__(self, player, charactor, direction):
		self.name = "Charactor Move Request"
		self.player = player
		self.charactor = charactor
		self.direction = direction

class CharactorMoveEvent(Event):
	def __init__(self, charactor):
		self.name = "Charactor Move Event"
		self.charactor = charactor

class CharactorPlaceEvent(Event):
	"""this event occurs when a Charactor is *placed* in a sector, 
	ie it doesn't move there from an adjacent sector."""
	def __init__(self, charactor):
		self.name = "Charactor Placement Event"
		self.charactor = charactor



class ServerConnectEvent(Event):
	"""the client generates this when it detects that it has successfully
	connected to the server"""
	def __init__(self, serverReference):
		self.name = "Network Server Connection Event"
		self.server = serverReference

class ClientConnectEvent(Event):
	"""this event is generated by the Server whenever a client connects
	to it"""
	def __init__(self, client):
		self.name = "Network Client Connection Event"
		self.client = client

class ClientDisconnectEvent(Event):
	"""this event is generated by the Server when it finds that a client 
	is no longer connected"""
	def __init__(self, client):
		self.name = "Network Client Disconnection Event"
		self.client = client

class ExplicitClientDisconnectEvent(Event):
	"""this event is generated by the Server when the client explicitly 
	disconnects from it"""
	def __init__(self, client):
		self.name = "Explicit Network Client Disconnection Event"
		self.client = client

class PlayerClientMismatchEvent(Event):
	"""this event is generated by the Server when a client tries to do 
	something with a player he doesn't control"""
	def __init__(self, playerName):
		self.name = "Player / Client Mismatch"
		self.playerName = playerName



class GameSyncEvent(Event):
	"""..."""
	def __init__(self, game):
		self.name = "Game Synched to Authoritative State"
		self.game = game

class PlayerJoinRequest(Event):
	"""..."""
	def __init__(self, playerDict):
		self.name = "Player Joining Game Request"
		self.playerDict = playerDict
		if not playerDict.has_key( 'name' ):
			raise "UnnamedPlayerException"

class PlayerJoinEvent(Event):
	"""..."""
	def __init__(self, player):
		self.name = "Player Joined Game Event"
		self.player = player

class CharactorPlaceRequest(Event):
	"""..."""
	def __init__(self, player, charactor, sector):
		self.name = "Charactor Placement Request"
		self.player = player
		self.charactor = charactor
		self.sector = sector

class GUIFocusNextWidgetEvent(Event):
	"""..."""
	def __init__(self, layer=0):
		self.name = "Activate the next widget Event"
		self.layer = layer

class GUIFocusPrevWidgetEvent(Event):
	"""..."""
	def __init__(self, layer=0):
		self.name = "Activate the previous widget Event"
		self.layer = layer

class GUIFocusThisWidgetEvent(Event):
	"""..."""
	def __init__(self, widget):
		self.name = "Activate particular widget Event"
		self.widget = widget

class GUIPressEvent(Event):
	"""..."""
	def __init__(self, layer=0):
		self.name = "All Active widgets get pressed Event"
		self.layer = layer

class GUIKeyEvent(Event):
	"""..."""
	def __init__(self, key, layer=0):
		self.name = "key pressed Event"
		self.key = key
		self.layer = layer

class GUIControlKeyEvent(Event):
	"""..."""
	def __init__(self, key):
		self.name = "Non-Printablekey pressed Event"
		self.key = key

class GUIClickEvent(Event):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Mouse Click Event"
		self.pos = pos
		self.layer = layer

class GUIMouseMoveEvent(Event):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Mouse Moved Event"
		self.pos = pos
		self.layer = layer

class GUICharactorSelectedEvent(Event):
	"""..."""
	def __init__(self, charactor, wipeOthers=1):
		self.name = "A Charactor has been selected by the user"
		self.charactor = charactor
		self.wipeOthers = wipeOthers


class GUICharactorUnSelectedEvent(Event):
	"""..."""
	def __init__(self, charactor):
		self.name = "A Charactor has been unselected by the user"
		self.charactor = charactor

class GUIChangeScreenRequest(Event):
	"""..."""
	def __init__(self, key):
		self.name = "Change the active GUI to the one referenced by key"
		self.key = key


class GUIDialogAddRequest(Event):
	"""..."""
	def __init__(self, key, msg):
		self.name = "Add a new dialog on top"
		self.key = key
		self.msg = msg

class GUIDialogRemoveRequest(Event):
	"""..."""
	def __init__(self, key):
		self.name = "Remove a new dialog from the top"
		self.key = key


class ExceptionEvent(Event):
	"""..."""
	def __init__(self, msg):
		self.name = "An exception occurred that we can handle"
		self.msg = msg

class BarScreenSelectEvent(Event):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Select Mouse Click Event"
		self.pos = pos
		self.layer = layer

class BarScreenActionEvent(Event):
	"""..."""
	def __init__(self, pos, layer=0):
		self.name = "Action Mouse Click Event"
		self.pos = pos
		self.layer = layer

